"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startSimulator = exports.getInstalledApplications = void 0;
const bplistParser = require("bplist-parser");
const fs = require("fs");
const _ = require("lodash");
const os_1 = require("os");
const path = require("path");
const plist = require("plist");
const childProcess = require("./child-process");
const xcode = require("./xcode");
function getInstalledApplications(deviceId) {
    let rootApplicationsPath = path.join((0, os_1.homedir)(), `/Library/Developer/CoreSimulator/Devices/${deviceId}/data/Containers/Bundle/Application`);
    if (!fs.existsSync(rootApplicationsPath)) {
        rootApplicationsPath = path.join((0, os_1.homedir)(), `/Library/Developer/CoreSimulator/Devices/${deviceId}/data/Applications`);
    }
    // since ios 14 - the Applications folder is not created on a fresh simulator, so if it doesn't exist
    // we know there are no applications installed.
    if (!fs.existsSync(rootApplicationsPath)) {
        return [];
    }
    let applicationGuids = fs.readdirSync(rootApplicationsPath);
    let result = [];
    _.each(applicationGuids, (applicationGuid) => {
        let fullApplicationPath = path.join(rootApplicationsPath, applicationGuid);
        if (fs.statSync(fullApplicationPath).isDirectory()) {
            let applicationDirContents = fs.readdirSync(fullApplicationPath);
            let applicationName = _.find(applicationDirContents, (fileName) => path.extname(fileName) === ".app");
            let plistFilePath = path.join(fullApplicationPath, applicationName, "Info.plist");
            result.push({
                guid: applicationGuid,
                appIdentifier: getBundleIdentifier(plistFilePath),
                path: path.join(fullApplicationPath, applicationName),
            });
        }
    });
    return result;
}
exports.getInstalledApplications = getInstalledApplications;
function startSimulator(deviceId) {
    let simulatorPath = path.resolve(xcode.getPathFromXcodeSelect(), "Applications", "Simulator.app");
    let args = ["open", simulatorPath];
    if (deviceId) {
        args.push("--args", "-CurrentDeviceUDID", deviceId);
    }
    childProcess.execSync(args.join(" "));
}
exports.startSimulator = startSimulator;
function parsePlist(fileNameOrBuffer) {
    let data;
    if (Buffer.isBuffer(fileNameOrBuffer)) {
        data = fileNameOrBuffer;
    }
    else {
        data = fs.readFileSync(fileNameOrBuffer);
    }
    return bplistParser.parseBuffer(data);
}
function getBundleIdentifier(plistFilePath) {
    let plistData;
    try {
        plistData = parsePlist(plistFilePath)[0];
    }
    catch (err) {
        let content = fs.readFileSync(plistFilePath).toString();
        plistData = plist.parse(content);
    }
    return plistData && plistData.CFBundleIdentifier;
}
//# sourceMappingURL=iphone-simulator-common.js.map